name: Build and push to ECR

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag:
        description: 'Optional custom tag (if empty, workflow generates one)'
        required: false
        default: ''

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Determine ECR registry (account ID)
        id: registry
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ECR_REGISTRY=${ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV
          echo "ECR_REGISTRY=${ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"

      - name: Set IMAGE_TAG (custom or generated)
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "IMAGE_TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
            echo "IMAGE_TAG=$(date -u +%Y%m%d)-$SHORT_SHA" >> $GITHUB_ENV
          fi
          echo "IMAGE_TAG=$IMAGE_TAG"

      - name: Ensure ECR repo exists (create if missing)
        run: |
          aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" || \
            aws ecr create-repository --repository-name "${ECR_REPOSITORY}"

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build and push (using Docker CLI)
        run: |
          FULL_IMAGE="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "Building ${FULL_IMAGE}"
          docker build -t "${FULL_IMAGE}" .
          # also tag 'latest' if you want
          docker tag "${FULL_IMAGE}" "${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
          docker push "${FULL_IMAGE}"
          docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
